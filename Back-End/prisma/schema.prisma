// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique @db.VarChar(100)
  password   String    @db.VarChar(255)
  name       String    @db.VarChar(100)
  no_telp    String    @db.VarChar(100)
  role       String    @db.VarChar(100)
  image      String    @db.VarChar(100)
  isActive   Boolean   @default(false)
  expireTime DateTime? @db.DateTime()
  token      String?   @db.Text()
  tokenReset String?   @db.Text()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  carts    Cart[]
  Order    Order[]
  Tracking Tracking[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  image       String   @db.VarChar(100)
  stok        Int
  price       Int
  category    String   @db.VarChar(100)
  description String?  @db.Text()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  carts     Cart[]
  OrderItem OrderItem[]

  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  quantity  Int
  total     Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  Product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

enum statusOrder {
  SUCCESS
  PENDING
  CANCELLED
}

enum statusTrackring {
  PROCESSING
  SHIPPING
  DELIVERED
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  totalPrice       Int
  shippingPrice    Int
  statusOrder      statusOrder
  address          String
  tokenMidtrans    String
  responseMidtrans String      @db.Text()
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  OrderItem        OrderItem[]
  Tracking         Tracking[]

  @@map("orders")
}

model Tracking {
  id                String          @id @default(uuid())
  status            statusTrackring
  city              String
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  orderId           String
  order             Order           @relation(fields: [orderId], references: [id])
  note              String?         @db.Text()
  courier           String
  estimatedDelivery String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@map("trackings")
}

model OrderItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  subtotal  Int
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}
